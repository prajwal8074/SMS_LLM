name: AWS Unit Tests

on:
  workflow_run:
    workflows: ["Marketplace Security CI"]
    types:
      - completed # This workflow will trigger when the specified workflow is 'completed'
  workflow_dispatch: # Allows manual triggering from the GitHub UI

jobs:
  test-aws:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup env
      run: |
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "REDIS_DB=0" >> $GITHUB_ENV
        echo "FLASK_SERVER_BASE_URL=http://localhost:5002" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Restore cached pip installations
      id: cache-restore
      uses: actions/cache@v4
      with:
        path: AWS/venv
        key: ${{ runner.os }}-pip-${{ hashFiles('AWS/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      if: steps.cache-restore.outputs.cache-hit != 'true'
      run: |
        cd AWS
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start Marketplace backend
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
      run: |
        cd AWS/MarketPlace/backend
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" > .env
        echo "TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID" > .env
        echo "TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN" > .env
        echo "TWILIO_PHONE_NUMBER=$TWILIO_PHONE_NUMBER" > .env
        docker compose up

    - name: Wait for PostgreSQL to be ready
      run: |
        chmod +x AWS/Test/wait_for_db.sh
        ./AWS/Test/wait_for_db.sh

    - name: Wait for app using /get_all_listings
      run: |
        chmod +x AWS/Test/get_all_listings.sh
        ./AWS/Test/get_all_listings.sh

    - name: List running containers
      run: |
        docker ps

    - name: Run function calling tests
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd AWS
        source venv/bin/activate
        python Test/function_calling_test.py

    - name: Print database after deletion
      run: |
        cd AWS/MarketPlace/backend
        sudo docker compose exec db psql -U user marketplace_db -c "SELECT * FROM listings;"

    - name: Run caching tests
      run: |
        cd AWS
        source venv/bin/activate
        python Test/cache_test.py

    - name: Print database after deletion
      run: |
        sudo docker exec redis-test redis-cli KEYS '*'

    - name: Run add_cache tests
      run: |
        cd AWS
        source venv/bin/activate
        chmod +x Test/add_cache_test.sh
        ./Test/add_cache_test.sh

    - name: Print database after deletion
      run: |
        sudo docker exec redis-test redis-cli KEYS '*'

    - name: Stop Marketplace backend
      run: |
        cd AWS/MarketPlace/backend
        docker compose down
        sudo systemctl stop postgresql