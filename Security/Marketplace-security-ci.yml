name: Marketplace Security CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 3 * * 1'  # Weekly at 03:00 UTC on Mondays
  workflow_dispatch:

env:
  DEPLOY_ENV: "production"
  SECURITY_CONTACT: "annam.ai.sms_llm@mayhem.com"

jobs:
  # 1. Build and Test Job
  build-and-test:
    name: Build, Test, and Pre-deploy Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 coverage python-dotenv requests safety pip-audit

      - name: Lint with flake8 (critical errors)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Lint with flake8 (style and complexity)
        run: flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests
        run: |
          python -m unittest discover AWS/Test '*Unittest.py'
          python -m unittest discover AWS/Test '*test.py'

      - name: Run integration tests
        run: python AWS/Test/integrating_test.py

      - name: Run end-to-end tests
        run: python AWS/Test/end_to_end_testing.py

      - name: Collect coverage and show report
        run: |
          coverage run -m unittest discover AWS/Test
          coverage report -m

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml

  # 2. Dependency and Static Security Job
  security-audit:
    name: Dependency and Static Security Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Python Safety Check
        run: safety check --full-report

      - name: Run pip-audit
        run: pip-audit

      # Marketplace-Specific: Pin trufflehog version
      - name: Scan for secrets with trufflehog
        uses: trufflesecurity/trufflehog@v3.62.0
        with:
          scanArguments: --path=.

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Ensure SECURITY.md policy file exists
        run: |
          if [ ! -f "SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ]; then
            echo "SECURITY.md missing! Please add a security policy."
            exit 1
          else
            echo "SECURITY.md found."
          fi

      - name: Check for dangerous file permissions
        run: |
          find . -type f -perm -o+w -not -path "./.git/*" && \
            (echo "World-writable files found! Review needed." && exit 1) || \
            echo "No world-writable files found."

      - name: Check .env.example for real secrets
        run: |
          if [ -f ".env.example" ]; then
            grep -iE "(password|key|secret|token)[=]" .env.example && \
              (echo ".env.example contains sensitive data! Review needed." && exit 1) || \
              echo ".env.example does not contain sensitive data."
          else
            echo ".env.example not found (OK if not using .env)."
          fi

  # 3. Marketplace-Specific Security Job
  marketplace-security-checks:
    name: Marketplace-Specific Security Checks
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify user ID handling (mobile-based)
        run: |
          grep -r --include="*.py" "user_id" . || echo "No direct user_id usage found."
          echo "Check that all user identity is based on mobile phone number, not guessable IDs."

      - name: Check for logging of sensitive info
        run: |
          grep -r --include="*.py" "log" . | grep -iE "user.*id|phone|mobile|email" && \
            (echo "Sensitive info might be logged! Review needed." && exit 1) || \
            echo "No logging of sensitive PII detected."

      - name: Check for unsafe Python patterns
        run: |
          grep -r --include="*.py" "eval(" . && \
            (echo "Use of eval detected! Review needed." && exit 1) || \
            echo "No use of eval detected."
          grep -r --include="*.py" "http://" . && \
            (echo "Insecure HTTP API call detected! Review needed." && exit 1) || \
            echo "No insecure HTTP API calls detected."
          grep -r --include="*.py" -E "except:$" . && \
            (echo "Bare except detected! Review needed." && exit 1) || \
            echo "No bare excepts detected."

      - name: Check for TODOs and FIXMEs
        run: |
          grep -r --include="*.py" -Ei "TODO|FIXME" . && \
            (echo "TODO or FIXME found! Review needed." && exit 1) || \
            echo "No TODOs/FIXMEs detected."

      - name: Check for world-writable files
        run: |
          find . -type f -perm -o+w -not -path "./.git/*" && \
            (echo "World-writable files found! Review needed." && exit 1) || \
            echo "No world-writable files found."

  # 4. Deployment Job
  deploy:
    name: Deploy to Production (Marketplace)
    runs-on: ubuntu-latest
    needs: [build-and-test, security-audit, marketplace-security-checks]
    environment:
      name: production
      url: ${{ steps.deployment.outputs.deployment_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up deployment secrets
        run: echo "Setting up deployment secrets (encrypted via GH Actions)..."

      - name: Deploy to production environment
        id: deployment
        run: |
          echo "Deploying Marketplace to $DEPLOY_ENV..."
          # Insert deployment CLI commands here (e.g., AWS CLI, kubectl, etc.)
          echo "deployment_url=https://marketplace.example.com" >> "$GITHUB_OUTPUT"

      - name: Ensure curl is available
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Post-deployment health check
        run: |
          curl -fsSL https://marketplace.example.com/healthz || \
            (echo "Health check failed!" && exit 1)
          echo "Deployment health check passed."

      - name: Validate email secrets
        run: |
          [ -z "${{ secrets.SECURITY_EMAIL_USER }}" ] && echo "SECURITY_EMAIL_USER missing!" && exit 1
          [ -z "${{ secrets.SECURITY_EMAIL_PASS }}" ] && echo "SECURITY_EMAIL_PASS missing!" && exit 1

      - name: Notify security contact of deployment
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.mayhem.com
          server_port: 587
          username: ${{ secrets.SECURITY_EMAIL_USER }}
          password: ${{ secrets.SECURITY_EMAIL_PASS }}
          subject: "Marketplace Deployed to Production"
          body: |
            The Marketplace has been deployed to production.
            Build: ${{ github.run_id }}
            Environment: ${{ env.DEPLOY_ENV }}
            URL: https://marketplace.example.com
          to: ${{ env.SECURITY_CONTACT }}
          from: github-actions@mayhem.com
